cmake_minimum_required(VERSION 3.5)
project(examples_rclcpp_minimal_service)
if(NOT WIN32)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra")
endif()
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)

rosidl_generate_interfaces(${PROJECT_NAME} "srv/AddTwoInts.srv")

add_executable(${PROJECT_NAME}_not_composable not_composable.cpp)

# the following CMake is only necessary at the moment to ensure that
# the services generated by this package are built before we attempt
# to build addition_server_lambda, which needs the build products of
# srv/AddTwoInts.srv to exist first.

# TODO: we can bake this into a nice-looking ament CMake macro for simplicity

get_default_rmw_implementation(rmw_implementation)
find_package("${rmw_implementation}" REQUIRED)

get_rmw_typesupport(typesupport_impls "${rmw_implementation}" LANGUAGE "cpp")
foreach(typesupport_impl ${typesupport_impls})
  rosidl_target_interfaces(${PROJECT_NAME}_not_composable ${PROJECT_NAME} ${typesupport_impl})
endforeach()

# now we're back to "normal" ament usage pattern, after the detour to
# make sure that srv/AddTwoInts.srv was built first
ament_target_dependencies(${PROJECT_NAME}_not_composable rclcpp)

install(TARGETS ${PROJECT_NAME}_not_composable
        DESTINATION bin)

ament_package()
